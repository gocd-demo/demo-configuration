<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="95">
  <server artifactsdir="artifacts" agentAutoRegisterKey="6a077cab-d25f-47cb-ac6f-efd395e932f7" webhookSecret="a0da85c4-86f6-4e48-941a-cfb07e334e74" commandRepositoryLocation="default" serverId="f9956612-c957-483a-afce-003be7c3b597">
    <elastic>
      <profiles>
        <profile id="test-profile-2" pluginId="com.thoughtworks.gocd.elastic-agent.ecs">
          <property>
            <key>Image</key>
            <value>gocd/gocd-agent-ubuntu-16.04:v17.9.0</value>
          </property>
          <property>
            <key>Command</key>
            <value />
          </property>
          <property>
            <key>Environment</key>
            <value />
          </property>
          <property>
            <key>MaxMemory</key>
            <value>512M</value>
          </property>
          <property>
            <key>ReservedMemory</key>
            <value>256M</value>
          </property>
          <property>
            <key>AMI</key>
            <value />
          </property>
          <property>
            <key>InstanceType</key>
            <value />
          </property>
          <property>
            <key>SubnetIds</key>
            <value />
          </property>
          <property>
            <key>SecurityGroupIds</key>
            <value />
          </property>
          <property>
            <key>IAMInstanceProfile</key>
            <value />
          </property>
        </profile>
        <profile id="docker-local" pluginId="cd.go.contrib.elastic-agent.docker">
          <property>
            <key>Image</key>
            <value>gocd/gocd-agent-ubuntu-16.04:v18.1.0</value>
          </property>
          <property>
            <key>Command</key>
            <value />
          </property>
          <property>
            <key>Environment</key>
            <value />
          </property>
          <property>
            <key>Hosts</key>
            <value />
          </property>
        </profile>
        <profile id="docker-maven" pluginId="cd.go.contrib.elastic-agent.docker">
          <property>
            <key>Image</key>
            <value>demo-images/maven-image:v.05</value>
          </property>
          <property>
            <key>Command</key>
            <value />
          </property>
          <property>
            <key>Environment</key>
            <value />
          </property>
          <property>
            <key>Hosts</key>
            <value />
          </property>
        </profile>
        <profile id="docker-ruby" pluginId="cd.go.contrib.elastic-agent.docker">
          <property>
            <key>Image</key>
            <value>demo-images/ruby-image:v.01</value>
          </property>
          <property>
            <key>Command</key>
            <value />
          </property>
          <property>
            <key>Environment</key>
            <value />
          </property>
          <property>
            <key>Hosts</key>
            <value />
          </property>
        </profile>
      </profiles>
    </elastic>
    <security>
      <authConfigs>
        <authConfig id="PasswordFile" pluginId="cd.go.authentication.passwordfile">
          <property>
            <key>PasswordFilePath</key>
            <value>/etc/go/password.properties</value>
          </property>
        </authConfig>
        <authConfig id="GitHub" pluginId="cd.go.authorization.github">
          <property>
            <key>ClientId</key>
            <encryptedValue>cVBIONQp6CZ27OhEJ/VaozBAJgh4wCLG</encryptedValue>
          </property>
          <property>
            <key>ClientSecret</key>
            <encryptedValue>crt/r7mRibTrB5kHsZhHFquKNUWQkr6ZsPrNqLFo2gqqm/9jkY9O/8X8SYg4OYqc</encryptedValue>
          </property>
          <property>
            <key>PersonalAccessToken</key>
            <encryptedValue>EjFRShqctpZ8cWatALWzqatUPXQO5QqYR3RL28/b6aoNi4H6HwdKWMd1Pba56409</encryptedValue>
          </property>
          <property>
            <key>AuthenticateWith</key>
            <value>GitHub</value>
          </property>
          <property>
            <key>GitHubEnterpriseUrl</key>
            <value />
          </property>
          <property>
            <key>AllowedOrganizations</key>
            <value />
          </property>
        </authConfig>
      </authConfigs>
      <roles>
        <pluginRole name="Demo" authConfigId="GitHub">
          <property>
            <key>Organizations</key>
            <value>gocd-demo</value>
          </property>
          <property>
            <key>Teams</key>
            <value />
          </property>
          <property>
            <key>Users</key>
            <value />
          </property>
        </pluginRole>
      </roles>
      <admins>
        <user>admin</user>
        <user>djrice</user>
        <user>demo-admin</user>
        <user>crogger62</user>
        <user>kmugrage</user>
      </admins>
    </security>
  </server>
  <pipelines group="Development">
    <pipeline name="build_and_test" isLocked="false">
      <materials>
        <git url="https://github.com/gocd-demo/jy_main_repo.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build" elasticProfileId="docker-maven">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <runif status="passed" />
              </exec>
              <exec command="mvn">
                <arg>compile</arg>
                <arg>-DskipTests</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="test">
        <jobs>
          <job name="unit_test">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <test src="target/surefire-reports/" />
            </artifacts>
          </job>
          <job name="integration_test">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>test</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <test src="target/surefire-reports/" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="installers">
      <materials>
        <git url="https://github.com/gocd-demo/jy_main_repo.git" />
        <pipeline pipelineName="build_and_test" stageName="test" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-maven">
            <tasks>
              <exec command="mvn">
                <arg>clean</arg>
                <arg>package</arg>
                <arg>-DskipTests</arg>
              </exec>
            </tasks>
            <artifacts>
              <artifact src="target/*.jar" dest="distribution" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="acceptance_tests">
      <materials>
        <git url="https://github.com/gocd-demo/jy_functional_tests.git" />
        <pipeline pipelineName="installers" stageName="defaultStage" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-ruby">
            <tasks>
              <exec command="./run_acceptance_tests.rb" />
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="regression_tests">
      <materials>
        <git url="https://github.com/gocd-demo/jy_functional_tests.git" />
        <pipeline pipelineName="installers" stageName="defaultStage" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-ruby">
            <tasks>
              <exec command="./run_acceptance_tests.rb" />
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="publish_installers">
      <materials>
        <git url="https://github.com/gocd-demo/jy_publish_installers.git" />
        <pipeline pipelineName="regression_tests" stageName="defaultStage" />
        <pipeline pipelineName="acceptance_tests" stageName="defaultStage" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-ruby">
            <tasks>
              <fetchartifact pipeline="installers/regression_tests" stage="defaultStage" job="defaultJob" srcdir="distribution">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./publish_installers.rb" />
            </tasks>
            <artifacts>
              <artifact src="distribution" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="QualityGates">
    <pipeline name="deploy_to_qa" template="deploy_and_test">
      <params>
        <param name="INSTALLER_PIPELINE">publish_installers</param>
      </params>
      <materials>
        <git url="https://github.com/gocd-demo/jy_deployment_scripts.git" dest="deployment_scripts" />
        <git url="https://github.com/gocd-demo/jy_functional_tests.git" dest="functional_tests" />
        <pipeline pipelineName="publish_installers" stageName="defaultStage" />
      </materials>
    </pipeline>
    <pipeline name="performance_tests">
      <materials>
        <git url="https://github.com/gocd-demo/jy_deployment_scripts.git" dest="deployment_scripts" />
        <git url="https://github.com/gocd-demo/jy_performance.git" dest="performance" />
        <pipeline pipelineName="publish_installers" stageName="defaultStage" />
      </materials>
      <stage name="deploy">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <fetchartifact pipeline="publish_installers" stage="defaultStage" job="defaultJob" srcdir="distribution">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./deploy.rb" workingdir="deployment_scripts" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="configure">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="./configure.rb" workingdir="deployment_scripts" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="benchmark">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="./run_jmeter_tests.rb" workingdir="performance" />
            </tasks>
            <tabs>
              <tab name="jmeter-report" path="reports/index.html" />
            </tabs>
            <artifacts>
              <artifact src="performance/reports" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Production">
    <pipeline name="deploy_to_prod" template="deploy_and_test">
      <params>
        <param name="INSTALLER_PIPELINE">publish_installers/deploy_to_qa</param>
      </params>
      <materials>
        <git url="https://github.com/gocd-demo/jy_deployment_scripts.git" dest="deployment_scripts" />
        <git url="https://github.com/gocd-demo/jy_functional_tests.git" dest="functional_tests" />
        <pipeline pipelineName="deploy_to_qa" stageName="run_user_tests" />
        <pipeline pipelineName="performance_tests" stageName="benchmark" />
      </materials>
    </pipeline>
  </pipelines>
  <templates>
    <pipeline name="deploy_and_test">
      <authorization>
        <admins>
          <user>david</user>
          <user>tester1</user>
          <user>qa1</user>
          <user>bhagat</user>
          <user>deployer1</user>
          <user>deploy1</user>
        </admins>
      </authorization>
      <stage name="ready-to-deploy">
        <jobs>
          <job name="do-nothing" elasticProfileId="docker-ruby">
            <tasks>
              <exec command="echo">
                <arg>Ready to deploy</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="deploy">
        <approval type="manual" />
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-ruby">
            <tasks>
              <fetchartifact pipeline="#{INSTALLER_PIPELINE}" stage="defaultStage" job="defaultJob" srcdir="distribution">
                <runif status="passed" />
              </fetchartifact>
              <exec command="./deploy.rb" workingdir="deployment_scripts" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="configure">
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-ruby">
            <tasks>
              <exec command="./configure.rb" workingdir="deployment_scripts" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="run_user_tests">
        <jobs>
          <job name="defaultJob" elasticProfileId="docker-ruby">
            <tasks>
              <exec command="./run_user_tests.rb" workingdir="functional_tests" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="rollback">
        <approval type="manual" />
        <jobs>
          <job name="do-rollback" elasticProfileId="docker-ruby">
            <tasks>
              <exec command="echo">
                <arg>I can roll back here</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <agents>
    <agent hostname="demo-gocd-server" ipaddress="127.0.0.1" uuid="5d88cf09-327e-4b34-8a73-4c42926a8f79" />
  </agents>
</cruise>
